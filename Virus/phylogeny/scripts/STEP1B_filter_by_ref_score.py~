import os
import sys

def find_all_alignment_files(base_name, alignment_folder):
    """
    Trouve tous les fichiers d'alignement en fonction du nom de base dans les dossiers d'alignement.
    """
    possible_filenames = [
        f"{base_name}",
        f"{base_name}_filtered",
        f"{base_name}-polinto",
        f"{base_name}-polinto_filtered"
    ]

    found_files = []
    for filename in possible_filenames:
        filepath = os.path.join(alignment_folder, filename)
        if os.path.exists(filepath):
            found_files.append(filepath)

    return found_files

def process_alignment_file(alignment_file, result_folder):
    """
    Traite le fichier d'alignement et filtre par score de référence.
    """
    with open(alignment_file, 'r') as f:
        alignments = f.readlines()
    
    filtered_results = []
    for alignment in alignments:
        # Simuler un filtre basé sur un score de référence, ici vous pouvez remplacer par la logique réelle de filtrage
        score = float(alignment.strip().split()[-1])  # Supposons que le score soit le dernier élément
        if score > 50:  # Supposons que 50 soit le seuil
            filtered_results.append(alignment)
    
    result_file = os.path.join(result_folder, os.path.basename(alignment_file) + "_filtered.txt")
    with open(result_file, 'w') as f:
        f.writelines(filtered_results)
    print(f"Filtered results written to {result_file}")

def filter_by_ref_score(alignment_folder, result_folder, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    protein_names = ["rnapol2", "tf2s", "pATPase-polinto", "capsid-polinto", "vltf3", "rnapol1", "capsid", "primase", "pATPase", "dnapol"]

    for protname in protein_names:
        alignment_files = find_all_alignment_files(protname, alignment_folder)
        
        if alignment_files:
            for alignment_file in alignment_files:
                print(f"Processing {alignment_file}")
                process_alignment_file(alignment_file, output_folder)
        else:
            print(f"Alignment files for {protname} not found in the specified folders.")

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python STEP1B_filter_by_ref_score.py <alignment_folder> <result_folder> <output_folder>")
        sys.exit(1)

    alignment_folder = sys.argv[1]
    result_folder = sys.argv[2]
    output_folder = sys.argv[3]

    filter_by_ref_score(alignment_folder, result_folder, output_folder)
