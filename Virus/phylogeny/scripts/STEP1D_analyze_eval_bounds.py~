import os
import sys
import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict
import seaborn as sns

plt.switch_backend('Agg')

def load_filtered_ids(filtered_folder):
    # Fonction pour charger les IDs (contigs/ORFs) des fichiers filtrés
    filtered_files = [os.path.join(filtered_folder, f) for f in os.listdir(filtered_folder) if f.endswith('_filt_blast')]
    data = defaultdict(list)
    for filtered_file in filtered_files:
        protein_name = os.path.splitext(os.path.basename(filtered_file))[0].replace('_filt_blast', '')
        with open(filtered_file, 'r') as file:
            for line in file:
                parts = line.strip().split('\t')
                if len(parts) == 1:
                    orf_id = parts[0]
                else:
                    orf_id = parts[1]
                if not orf_id:
                    continue
                contig_id = orf_id.split('_')[0]
                data[protein_name].append((contig_id, orf_id))
    return data

def count_contigs(data):
    # Compte le nombre de contigs uniques par protéine
    contig_counts = defaultdict(set)
    for protein, entries in data.items():
        for contig_id, _ in entries:
            contig_counts[protein].add(contig_id)
    return {protein: len(contigs) for protein, contigs in contig_counts.items()}

def count_orfs(data):
    # Compte le nombre d'ORFs uniques par protéine
    orf_counts = defaultdict(set)
    for protein, entries in data.items():
        for _, orf_id in entries:
            orf_counts[protein].add(orf_id)
    return {protein: len(orfs) for protein, orfs in orf_counts.items()}

def create_presence_absence_table(data, level='contig'):
    # Crée un tableau de présence/absence des contigs ou ORFs par protéine
    key_index = 0 if level == 'contig' else 1
    contig_orf_table = defaultdict(lambda: defaultdict(lambda: 0))
    for protein, entries in data.items():
        for ids in entries:
            contig_orf_table[ids[key_index]][protein] = 1
    return pd.DataFrame(contig_orf_table).T.fillna(0).astype(int)

def plot_counts(counts, output_folder, threshold, level='contig'):
    # Trace le nombre de contigs/ORFs par protéine pour un seuil donné
    df = pd.DataFrame(list(counts.items()), columns=['Protein', 'Count'])
    df = df.sort_values(by='Count', ascending=False)

    plt.figure(figsize=(10, 6))
    sns.barplot(x='Protein', y='Count', data=df, palette='viridis')
    plt.xlabel('Protein')
    plt.ylabel(f'Number of {level.capitalize()}s')
    plt.title(f'Number of {level.capitalize()}s per Protein (Threshold: {threshold})')
    plt.xticks(rotation=90)
    plt.tight_layout()
    output_path = os.path.join(output_folder, f'{level}_counts_per_protein_{threshold}.png')
    plt.savefig(output_path)
    plt.close()

def analyze_thresholds(base_folder, output_folder):
    # Analyse les données pour chaque seuil de filtration
    os.makedirs(output_folder, exist_ok=True)
    overall_data_contig = []
    overall_data_orf = []

    subfolders = [f for f in os.listdir(base_folder) if os.path.isdir(os.path.join(base_folder, f))]
    subfolders = sorted(subfolders, key=lambda x: (x != 'ref_bounds', float(x.replace('e', 'E')) if x != 'ref_bounds' else 1), reverse=True)

    for threshold in subfolders:
        threshold_folder = os.path.join(base_folder, threshold)
        data = load_filtered_ids(threshold_folder)
        
        if not data:
            continue
        
        contig_counts = count_contigs(data)
        orf_counts = count_orfs(data)
        
        presence_absence_table_contig = create_presence_absence_table(data, level='contig')
        presence_absence_table_orf = create_presence_absence_table(data, level='orf')
        
        presence_absence_table_contig.to_csv(os.path.join(output_folder, f'presence_absence_table_contig_{threshold}.csv'))
        presence_absence_table_orf.to_csv(os.path.join(output_folder, f'presence_absence_table_orf_{threshold}.csv'))
        
        plot_counts(contig_counts, output_folder, threshold, level='contig')
        plot_counts(orf_counts, output_folder, threshold, level='orf')
        
        for protein, count in contig_counts.items():
            overall_data_contig.append((protein, count, threshold))
        
        for protein, count in orf_counts.items():
            overall_data_orf.append((protein, count, threshold))

        with open(os.path.join(output_folder, f'analysis_summary_{threshold}.txt'), 'w') as summary_file:
            summary_file.write(f"Total proteins analyzed: {len(contig_counts)}\n")
            summary_file.write(f"Total unique contigs: {len(presence_absence_table_contig)}\n")
            summary_file.write(f"Total unique ORFs: {len(presence_absence_table_orf)}\n\n")
            summary_file.write("Number of contigs per protein:\n")
            for protein, count in contig_counts.items():
                summary_file.write(f"{protein}: {count}\n")
            summary_file.write("\nNumber of ORFs per protein:\n")
            for protein, count in orf_counts.items():
                summary_file.write(f"{protein}: {count}\n")
    
    plot_overall_counts(overall_data_contig, output_folder, level='contig')
    plot_overall_counts(overall_data_orf, output_folder, level='orf')

def plot_overall_counts(data, output_folder, level='contig'):
    # Trace les données globales pour toutes les protéines à tous les seuils
    df = pd.DataFrame(data, columns=['Protein', 'Count', 'Threshold'])

    plt.figure(figsize=(12, 8))
    sns.barplot(x='Protein', y='Count', hue='Threshold', data=df, palette='viridis')
    plt.xlabel('Protein')
    plt.ylabel(f'Number of {level.capitalize()}s')
    plt.title(f'Number of {level.capitalize()}s per Protein across Different E-value Thresholds')
    plt.xticks(rotation=90)
    plt.legend(title='E-value Threshold')
    plt.tight_layout()
    overall_path = os.path.join(output_folder, f'overall_{level}_counts_per_protein.png')
    plt.savefig(overall_path)
    plt.close()

def compare_thresholds(output_folder, thresholds):
    # Comparaison des protéines détectées pour chaque contig entre les différents seuils
    comparison_data = defaultdict(lambda: defaultdict(list))
    
    for threshold in thresholds:
        presence_absence_file = os.path.join(output_folder, f'presence_absence_table_contig_{threshold}.csv')
        if not os.path.exists(presence_absence_file):
            continue
        
        df = pd.read_csv(presence_absence_file, index_col=0)

        for contig in df.index:
            for protein in df.columns:
                if df.loc[contig, protein] == 1:
                    comparison_data[contig][threshold].append(protein)
    
    comparison_summary_folder = os.path.join(output_folder, 'comparison_summary')
    os.makedirs(comparison_summary_folder, exist_ok=True)
    comparison_summary_path = os.path.join(comparison_summary_folder, 'comparison_summary.txt')
    
    with open(comparison_summary_path, 'w') as summary_file:
        for contig, threshold_data in comparison_data.items():
            summary_file.write(f"Contig {contig}:\n")
            for threshold, proteins in threshold_data.items():
                summary_file.write(f"  Threshold {threshold}: {', '.join(proteins)}\n")

def main():
    if len(sys.argv) != 3:
        print("Usage: python analyze_filtered_data.py <base_folder> <output_folder>")
        sys.exit(1)

    base_folder = sys.argv[1]
    output_folder = sys.argv[2]
    
    analyze_thresholds(base_folder, output_folder)
    subfolders = [f for f in os.listdir(base_folder) if os.path.isdir(os.path.join(base_folder, f))]
    subfolders = sorted(subfolders, key=lambda x: (x != 'ref_bounds', float(x.replace('e', 'E')) if x != 'ref_bounds' else 1), reverse=True)
    compare_thresholds(output_folder, subfolders)

if __name__ == "__main__":
    main()
